/*
 * Ym2149Synth
 * http://trash80.com
 * Copyright (c) 2016 Timothy Lamb
 *
 * This file is part of Ym2149Synth.
 *
 * Ym2149Synth is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Ym2149Synth is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

 #include "SynthVoice.h"

/*
 *
 * ~~~~~ BEHOLD ALLMIGHTY JAVASCRIPT FOR TABLE GENERATION. ~~~
 * Run in a browser console.
 *
 * For YM pitch "freqTable":
 * function nf(n) {return Math.round((2000000.0/((Math.pow(2,(((n) - 69)/12)) * 440.0)))/16);};var out = [];for(var i =0; i<128; i += 0.1) out.push(nf(i));copy(out.toString());console.log("Data in copybuffer. Array size is "+out.length);
 *
 * For SoftSynth pitch "softFreqTable":
 * function nf(n) {return Math.round((Math.pow(2,(((n) - 69)/12)) * 440.0) * (1.0/22050) * 100000);};var out = [];for(var i =0; i<128; i += 0.1) out.push(nf(i));copy(out.toString());console.log("Data in copybuffer. Array size is "+out.length);
 *
 * For Volume Envelope Table :
 * size=256;function nf(n) {return Math.round(Math.pow(n, 1.75) * 255);};var out = [];for(var i =0; i<size; i += 1) out.push(nf(i/size));copy(out.toString());console.log("Data in copybuffer. Array size is "+out.length);
 *
*/
//@TODO document this class
//@TODO resize these arrays to only include notes that are playable
const static uint16_t tableSize = 1281;
const static uint16_t freqTable[tableSize] = {
    15289,15201,15113,15026,14940,14854,14768,14683,14599,14515,14431,14348,14265,14183,14101,14020,13939,13859,13779,13700,13621,13543,13465,13387,13310,13233,13157,13081,13006,12931,12856,12782,12709,12636,12563,12490,12419,12347,12276,12205,12135,12065,11996,11926,11858,11789,11722,11654,11587,11520,11454,11388,11322,11257,11192,11128,11064,11000,10937,10874,10811,10749,10687,10625,10564,10503,10443,10383,10323,10263,10204,10145,10087,10029,9971,9914,9857,9800,9743,9687,9631,9576,9521,9466,9411,9357,9303,9250,9197,9144,9091,9039,8986,8935,8883,8832,8781,8731,8680,8630,8581,8531,8482,8433,8385,8336,8288,8241,8193,8146,8099,8052,8006,7960,7914,7869,7823,7778,7733,7689,7645,7600,7557,7513,7470,7427,7384,7342,7299,7257,7215,7174,7133,7092,7051,7010,6970,6930,6890,6850,6810,6771,6732,6693,6655,6617,6578,6541,6503,6465,6428,6391,6354,6318,6281,6245,6209,6174,6138,6103,6067,6033,5998,5963,5929,5895,5861,5827,5793,5760,5727,5694,5661,5629,5596,5564,5532,5500,5468,5437,5405,5374,5343,5313,5282,5252,5221,5191,5161,5132,5102,5073,5043,5014,4986,4957,4928,4900,4872,4844,4816,4788,4760,4733,4706,4679,4652,4625,4598,4572,4545,4519,4493,4467,4442,4416,4391,4365,4340,4315,4290,4266,4241,4217,4192,4168,4144,4120,4097,4073,4050,4026,4003,3980,3957,3934,3912,3889,3867,3844,3822,3800,3778,3757,3735,3713,3692,3671,3650,3629,3608,3587,3566,3546,3525,3505,3485,3465,3445,3425,3405,3386,3366,3347,3327,3308,3289,3270,3251,3233,3214,3196,3177,3159,3141,3123,3105,3087,3069,3051,3034,3016,2999,2982,2964,2947,2930,2914,2897,2880,2863,2847,2831,2814,2798,2782,2766,2750,2734,2718,2703,2687,2672,2656,2641,2626,2611,2596,2581,2566,2551,2536,2522,2507,2493,2478,2464,2450,2436,2422,2408,2394,2380,2367,2353,2339,2326,2312,2299,2286,2273,2260,2247,2234,2221,2208,2195,2183,2170,2158,2145,2133,2121,2108,2096,2084,2072,2060,2048,2036,2025,2013,2002,1990,1979,1967,1956,1945,1933,1922,1911,1900,1889,1878,1867,1857,1846,1835,1825,1814,1804,1793,1783,1773,1763,1753,1742,1732,1722,1712,1703,1693,1683,1673,1664,1654,1645,1635,1626,1616,1607,1598,1589,1579,1570,1561,1552,1543,1534,1526,1517,1508,1499,1491,1482,1474,1465,1457,1448,1440,1432,1423,1415,1407,1399,1391,1383,1375,1367,1359,1351,1344,1336,1328,1321,1313,1305,1298,1290,1283,1276,1268,1261,1254,1246,1239,1232,1225,1218,1211,1204,1197,1190,1183,1176,1170,1163,1156,1150,1143,1136,1130,1123,1117,1110,1104,1098,1091,1085,1079,1073,1066,1060,1054,1048,1042,1036,1030,1024,1018,1012,1007,1001,995,989,984,978,972,967,961,956,950,945,939,934,928,923,918,912,907,902,897,892,886,881,876,871,866,861,856,851,846,842,837,832,827,822,818,813,808,804,799,794,790,785,781,776,772,767,763,758,754,750,745,741,737,733,728,724,720,716,712,708,704,700,695,691,687,684,680,676,672,668,664,660,656,653,649,645,641,638,634,630,627,623,620,616,612,609,605,602,599,595,592,588,585,581,578,575,571,568,565,562,558,555,552,549,546,543,539,536,533,530,527,524,521,518,515,512,509,506,503,500,497,495,492,489,486,483,481,478,475,472,470,467,464,462,459,456,454,451,448,446,443,441,438,436,433,431,428,426,423,421,418,416,414,411,409,406,404,402,399,397,395,393,390,388,386,384,381,379,377,375,373,371,368,366,364,362,360,358,356,354,352,350,348,346,344,342,340,338,336,334,332,330,328,326,324,323,321,319,317,315,313,312,310,308,306,304,303,301,299,298,296,294,292,291,289,287,286,284,282,281,279,278,276,274,273,271,270,268,267,265,264,262,261,259,258,256,255,253,252,250,249,247,246,244,243,242,240,239,238,236,235,233,232,231,229,228,227,225,224,223,222,220,219,218,217,215,214,213,212,210,209,208,207,206,204,203,202,201,200,199,197,196,195,194,193,192,191,190,189,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,159,158,157,156,155,154,153,152,151,150,150,149,148,147,146,145,145,144,143,142,141,140,140,139,138,137,136,136,135,134,133,133,132,131,130,130,129,128,127,127,126,125,124,124,123,122,122,121,120,119,119,118,117,117,116,115,115,114,113,113,112,111,111,110,110,109,108,108,107,106,106,105,105,104,103,103,102,102,101,100,100,99,99,98,98,97,96,96,95,95,94,94,93,93,92,92,91,91,90,89,89,88,88,87,87,86,86,85,85,84,84,83,83,83,82,82,81,81,80,80,79,79,78,78,77,77,77,76,76,75,75,74,74,74,73,73,72,72,71,71,71,70,70,69,69,69,68,68,67,67,67,66,66,66,65,65,64,64,64,63,63,63,62,62,61,61,61,60,60,60,59,59,59,58,58,58,57,57,57,56,56,56,55,55,55,54,54,54,54,53,53,53,52,52,52,51,51,51,51,50,50,50,49,49,49,49,48,48,48,47,47,47,47,46,46,46,46,45,45,45,44,44,44,44,43,43,43,43,42,42,42,42,42,41,41,41,41,40,40,40,40,39,39,39,39,39,38,38,38,38,37,37,37,37,37,36,36,36,36,36,35,35,35,35,35,34,34,34,34,34,33,33,33,33,33,32,32,32,32,32,31,31,31,31,31,31,30,30,30,30,30,30,29,29,29,29,29,29,28,28,28,28,28,28,27,27,27,27,27,27,26,26,26,26,26,26,26,25,25,25,25,25,25,25,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9
};

//@TODO fixed point, could be unsigned long
const static uint16_t softFreqTable[tableSize] = {
    37,37,38,38,38,38,38,39,39,39,39,40,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44,45,45,45,45,46,46,46,46,47,47,47,48,48,48,48,49,49,49,49,50,50,50,51,51,51,52,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,65,65,65,66,66,66,67,67,68,68,68,69,69,70,70,70,71,71,72,72,72,73,73,74,74,75,75,75,76,76,77,77,78,78,79,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,95,95,96,96,97,97,98,98,99,100,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,109,110,110,111,112,112,113,114,114,115,116,116,117,118,118,119,120,120,121,122,123,123,124,125,125,126,127,128,128,129,130,131,131,132,133,134,134,135,136,137,138,138,139,140,141,142,142,143,144,145,146,147,147,148,149,150,151,152,153,154,154,155,156,157,158,159,160,161,162,163,164,165,166,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,183,184,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,203,204,205,206,207,209,210,211,212,213,215,216,217,218,220,221,222,224,225,226,227,229,230,231,233,234,235,237,238,240,241,242,244,245,247,248,249,251,252,254,255,257,258,260,261,263,264,266,267,269,270,272,274,275,277,278,280,282,283,285,287,288,290,292,293,295,297,298,300,302,304,305,307,309,311,312,314,316,318,320,322,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,372,374,376,378,380,382,385,387,389,391,394,396,398,401,403,405,408,410,412,415,417,419,422,424,427,429,432,434,437,439,442,444,447,450,452,455,457,460,463,465,468,471,474,476,479,482,485,487,490,493,496,499,502,505,508,511,513,516,519,522,525,529,532,535,538,541,544,547,550,554,557,560,563,566,570,573,576,580,583,586,590,593,597,600,604,607,611,614,618,621,625,629,632,636,640,643,647,651,654,658,662,666,670,674,678,681,685,689,693,697,701,706,710,714,718,722,726,730,735,739,743,747,752,756,761,765,769,774,778,783,787,792,796,801,806,810,815,820,825,829,834,839,844,849,854,859,864,869,874,879,884,889,894,899,904,910,915,920,926,931,936,942,947,953,958,964,969,975,981,986,992,998,1004,1009,1015,1021,1027,1033,1039,1045,1051,1057,1063,1069,1076,1082,1088,1094,1101,1107,1113,1120,1126,1133,1139,1146,1153,1159,1166,1173,1180,1187,1193,1200,1207,1214,1221,1228,1235,1243,1250,1257,1264,1272,1279,1286,1294,1301,1309,1317,1324,1332,1340,1347,1355,1363,1371,1379,1387,1395,1403,1411,1419,1427,1436,1444,1452,1461,1469,1478,1486,1495,1504,1512,1521,1530,1539,1548,1557,1566,1575,1584,1593,1602,1611,1621,1630,1640,1649,1659,1668,1678,1688,1697,1707,1717,1727,1737,1747,1757,1768,1778,1788,1798,1809,1819,1830,1840,1851,1862,1873,1883,1894,1905,1916,1927,1939,1950,1961,1973,1984,1995,2007,2019,2030,2042,2054,2066,2078,2090,2102,2114,2126,2139,2151,2164,2176,2189,2201,2214,2227,2240,2253,2266,2279,2292,2305,2319,2332,2346,2359,2373,2387,2401,2415,2428,2443,2457,2471,2485,2500,2514,2529,2543,2558,2573,2588,2603,2618,2633,2648,2664,2679,2695,2710,2726,2742,2758,2774,2790,2806,2822,2838,2855,2871,2888,2905,2922,2938,2955,2973,2990,3007,3025,3042,3060,3077,3095,3113,3131,3149,3168,3186,3204,3223,3242,3260,3279,3298,3317,3337,3356,3375,3395,3415,3434,3454,3474,3494,3515,3535,3556,3576,3597,3618,3639,3660,3681,3702,3724,3745,3767,3789,3811,3833,3855,3877,3900,3922,3945,3968,3991,4014,4037,4061,4084,4108,4132,4156,4180,4204,4228,4253,4277,4302,4327,4352,4377,4403,4428,4454,4480,4506,4532,4558,4584,4611,4638,4665,4692,4719,4746,4774,4801,4829,4857,4885,4913,4942,4971,4999,5028,5057,5087,5116,5146,5176,5206,5236,5266,5297,5327,5358,5389,5420,5452,5483,5515,5547,5579,5612,5644,5677,5710,5743,5776,5809,5843,5877,5911,5945,5980,6014,6049,6084,6119,6155,6191,6226,6262,6299,6335,6372,6409,6446,6483,6521,6559,6597,6635,6673,6712,6751,6790,6829,6869,6909,6949,6989,7029,7070,7111,7152,7194,7235,7277,7319,7362,7404,7447,7490,7534,7578,7621,7666,7710,7755,7800,7845,7890,7936,7982,8028,8075,8121,8168,8216,8263,8311,8359,8408,8456,8505,8555,8604,8654,8704,8755,8805,8856,8908,8959,9011,9063,9116,9169,9222,9275,9329,9383,9437,9492,9547,9602,9658,9714,9770,9827,9884,9941,9999,10057,10115,10173,10232,10292,10351,10411,10471,10532,10593,10655,10716,10778,10841,10904,10967,11030,11094,11158,11223,11288,11353,11419,11485,11552,11619,11686,11754,11822,11890,11959,12029,12098,12168,12239,12310,12381,12453,12525,12597,12670,12744,12818,12892,12967,13042,13117,13193,13270,13347,13424,13502,13580,13658,13738,13817,13897,13978,14059,14140,14222,14304,14387,14471,14554,14639,14724,14809,14895,14981,15068,15155,15243,15331,15420,15509,15599,15689,15780,15872,15964,16056,16149,16243,16337,16431,16527,16622,16719,16816,16913,17011,17109,17209,17308,17409,17509,17611,17713,17815,17919,18022,18127,18232,18337,18444,18551,18658,18766,18875,18984,19094,19205,19316,19428,19540,19654,19767,19882,19997,20113,20230,20347,20465,20583,20702,20822,20943,21064,21186,21309,21432,21557,21681,21807,21933,22060,22188,22317,22446,22576,22707,22838,22971,23104,23238,23372,23508,23644,23781,23919,24057,24196,24337,24478,24619,24762,24905,25050,25195,25341,25488,25635,25784,25933,26083,26234,26386,26539,26693,26848,27003,27160,27317,27475,27634,27794,27955,28117,28280,28444,28609,28775,28941,29109,29278,29447,29618,29789,29962,30135,30310,30486,30662,30840,31019,31198,31379,31561,31744,31927,32112,32298,32486,32674,32863,33053,33245,33437,33631,33826,34022,34219,34417,34617,34817,35019,35222,35426,35631,35837,36045,36254,36464,36675,36887,37101,37316,37532,37750,37968,38188,38410,38632,38856,39081,39307,39535,39764,39994,40226,40459,40693,40929,41166,41405,41645,41886,42129,42373,42618,42865,43113,43363,43614,43867,44121,44377,44634,44892,45152,45414,45677,45941,46208,46475,46745,47015,47288,47562,47837,48114,48393,48673,48955,49239,49524,49811,50100,50390,50682,50975,51271,51568,51866,52167,52469,52773,53079,53386,53695,54006,54319,54634,54950,55269,55589,55911,56235,56561,56888,57218,57549,57883,58218,58555,58894,59236,59579,59924,60271
};

const static uint8_t volumeEnvelopeTable[256] = {
0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,9,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,20,20,21,21,22,23,23,24,24,25,26,26,27,28,28,29,30,30,31,32,33,33,34,35,36,36,37,38,39,39,40,41,42,43,43,44,45,46,47,48,48,49,50,51,52,53,54,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,110,111,112,113,114,116,117,118,119,121,122,123,125,126,127,128,130,131,132,134,135,136,138,139,140,142,143,144,146,147,149,150,151,153,154,156,157,158,160,161,163,164,166,167,168,170,171,173,174,176,177,179,180,182,183,185,186,188,189,191,192,194,196,197,199,200,202,203,205,207,208,210,211,213,215,216,218,220,221,223,224,226,228,229,231,233,234,236,238,240,241,243,245,246,248,250,252,255
};

#define map_int16(x, in_min, in_max, out_min, out_max) ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)

void SynthVoice::begin(YM2149 * ym, uint8_t sy)
{
    Ym = ym;
    synth = sy;

    enableVoice = true;
    enableSoftsynth = true;

    Ym->setNoise(synth,0);
    Ym->setEnv(synth,0);
    volumeEnvelope.begin();
    pitchEnvelope.begin();

    volumeEnvelope.setShape(0x00);
    volumeEnvelope.setRange(0,31);
    volumeEnvelope.setLookupTable(volumeEnvelopeTable,255);

    pitchEnvelope.setShape(0x00);
    pitchEnvelope.setRange(0,0);

    synthType = 255;
    setSynthType(0);
}

void SynthVoice::updateSoftsynth()
{
    //@TODO optimize this, used fixed.h for fixed point math
    if(!enableSoftsynth || volume <= 0) {
        return;
    }

    softPhase += softIncrement;

    if(softPhase > 100000) softPhase -= 100000;
    if(softPhase < 0) softPhase += 100000;

    if(softPhase >= softWidth) {
        if(softWavPos) {
            softWavPos = 0;
            Ym->setVolume(synth,volume);
        }
    } else {
        if(!softWavPos) {
            softWavPos = 1;
            Ym->setVolume(synth,0);
        }
    }
}

void SynthVoice::updateEvents()
{
    //@TODO optimize this, used fixed.h for fixed point math
    uint16_t voiceF = currentNoteFreq+transpose;


    uint16_t envF = 0;
    uint16_t softF = 0;

    if(playing) {

        if(glideActive) {
            uint16_t destF  = noteFreq+transpose;
            glidePhase += glideIncrement;
            if(destF > voiceF) {
                voiceF += (glidePhase/1000);
                if(voiceF >= destF) {
                    lastNoteFreq = -1;
                    voiceF = destF;
                    currentNoteFreq = noteFreq;
                    glideActive = false;
                }
            } else {
                voiceF -= (glidePhase/1000);
                if(voiceF <= destF) {
                    lastNoteFreq = -1;
                    voiceF = destF;
                    currentNoteFreq = noteFreq;
                    glideActive = false;
                }
            }
        }

        if(bendWheel) {
            voiceF += bendWheel;
        }

        envF = softF = voiceF;

        if(vibratoAmount && currentNoteFreq) {
            vibratoPhase += vibratoIncrement;
            if(vibratoPhase > 10000) vibratoPhase -= 20000;
            if(vibratoPhase < -10000) vibratoPhase += 20000;
            voiceF += map_int16(((abs(vibratoPhase) * 2) - 10000), -10000, 10000, vibratoAmount*-1, vibratoAmount)/100;
        }

        if(pitchEnvAmount) {
            pitchEnvelope.update();
            uint16_t pitchEnvAmt = pitchEnvelope.read();
            voiceF += pitchEnvAmt;
        }

        if(voiceF != lastNoteFreq) {
            lastNoteFreq = voiceF;

            if(!voicePitchModOnly) {
                envF = softF = voiceF;
            }

            if(enableSoftsynth) {
                uint16_t sf = softF;
                if(enableSoftDetune) sf +=pwmFreq+softFreqDetune;
                if(sf>=tableSize) sf = tableSize-1;
                softIncrement = softFreqTable[sf];
            }

            if(enableEnv) {
                if(voicePitchModOnly) {
                    // Acid on the pitch Envelope
                    Ym->setTone(synth,freqTable[voiceF+(softFreqDetune>>1)]);
                    Ym->setTone(4,freqTable[envF+pwmFreq]);
                } else {
                    Ym->setTone(4,freqTable[voiceF+pwmFreq]);
                }
            } else if (enableVoice) {
                if(voicePitchModOnly) {
                    Ym->setTone(synth,freqTable[voiceF+(softFreqDetune>>1)]);
                } else {
                    Ym->setTone(synth,freqTable[voiceF]);
                }
            }
            if (enableNoise) {
                Ym->setTone(3,0x1F - (((uint8_t)(voiceF/10))>>2));
            }
        }

        if(volumeEnvelope.update()) {
            volume = volumeEnvelope.read();
            if(volume == 0 && volumeEnvelope.getShape() & 0x80) {
                playing = false;
            }
            if(!enableSoftsynth)
                Ym->setVolume(synth,volume);
        }

        if(noiseDelay && !noiseDelayTriggered) {
            noiseDelayPhase += 1;
            if(noiseDelayPhase >= noiseDelayIncrement) {
                noiseDelayPhase = 0;
                noiseDelayTriggered = true;
                if(!enableNoise) {
                    Ym->setNoise(synth,2);
                } else {
                    Ym->setNoise(synth,0);
                }
            }
        }
    }
}

void SynthVoice::playNote(uint8_t n, uint8_t v)
{
    //@TODO refactor this
    //@TODO use a new note buffer class for handling monophonic note behavior
    if(v) {
        velocity = v;
        note     = n;
        noteFreq = ((uint16_t)n)*10;


        if(playing == false) {
            volumeEnvelope.reset();
            volumeEnvelope.setRange(0,v>>3);
            currentNoteFreq = noteFreq;
            volume = -1;

            glidePhase = 0;
            glideActive= false;
        } else {
            if(glide) {
                if(glideActive) currentNoteFreq = lastNoteFreq;
                glideActive = true;
                glidePhase = 0;

                glideIncrement = (((uint32_t)abs(noteFreq - currentNoteFreq))*10000)/glide;
                if(!glideIncrement) glideIncrement = 1;
            } else {
                glideIncrement = 0;
                currentNoteFreq = noteFreq;
                glidePhase = 0;
                glideActive= false;
            }
        }

        pitchEnvelope.reset();

        if(softIncrement > 1) softIncrement = 1;
        if(softIncrement < 0) softIncrement = 0;

        if(!enableVoice) {
            Ym->setNote(synth,255);
        }

        if(enableNoise) {
            Ym->setNoise(synth,1);
        } else {
            noiseDelayTriggered = false;
            enableNoise = false;
            Ym->setNoise(synth,0);
        }
        noiseDelayPhase = 0;

        if(enableEnv) {
            Ym->setEnv(synth,1);
            Ym->setEnvShape(0,0,0,0);
            if(envType == 1) {
                Ym->setEnvShape(1,0,0,0);
            } else {
                Ym->setEnvShape(1,0,1,0);
            }
        }

        playing = true;
        lastNoteFreq = 0;
    } else if(n == note) {
        playing = false;
        volume = 0;
        if(enableEnv) {
            Ym->setEnv(synth,0);
        }
        Ym->setVolume(synth,0);
    }
}

void SynthVoice::setPitchbend(int v)
{
    // Plus / minus 2 notes (since we have glide)
    // v == -0x2000 to 0x2000
    bendWheel = (v>>2)/100;
}

void SynthVoice::setGlide(uint8_t v)
{
    //unsigned int ms = map(v, 0, 127, 0, 1000);
    glide = v;
    glide<<=6;
}

void SynthVoice::setVolumeEnvShape(uint8_t v)
{
    if(v == 64) v = 65;
    volumeEnvelope.setShape(v);
}

void SynthVoice::setPitchEnvShape(uint8_t v)
{
    pitchEnvelope.setShape(v);
}

void SynthVoice::setPitchEnvAmount(uint8_t v)
{
    pitchEnvAmount = v;
    pitchEnvAmount*= 10;
    pitchEnvelope.setRange(0,pitchEnvAmount);
}

void SynthVoice::setVibratoAmount(uint8_t v)
{
    vibratoAmount = v*100;
}

void SynthVoice::setVibratoFreq(uint8_t v)
{
    unsigned int ms = (pow(8000.0f,1.0f - ((float)v)/127.0f)) + 5;
    vibratoIncrement = (1.0f/ms)*10000;
}

void SynthVoice::setPwmFreq(uint8_t v)
{
    pwmFreq = v;

    if(synthType == 6) {
        softWidth = (((float)(pwmFreq)/255) + 0.5) * 100000;
    }
    if(playing) {
        lastNoteFreq = 0;
    }
}

void SynthVoice::setSoftDetune(uint8_t v)
{
    softFreqDetune = v;
    softFreqDetune *= 10;
    if(playing) {
        lastNoteFreq = 0;
    }
}

void SynthVoice::setNoiseDelay(uint8_t v)
{
    noiseDelay = v;
    v = 127 - v;
    noiseDelayIncrement = v<<1;
}

void SynthVoice::setTranspose(uint8_t v)
{
    if(!v) v = 64;
    transpose = (((int)v) - 64) * 10;
}

void SynthVoice::setSynthType(uint8_t v)
{
    if(v == synthType) return;

    synthType = v;

    if(enableNoise) Ym->setNoise(synth,0);
    if(enableEnv) Ym->setEnv(synth,0);

    enableVoice = false;
    enableSoftsynth = false;
    enableEnv   = false;
    envType     = 0;
    enableNoise = false;
    enableSoftDetune = false;
    voicePitchModOnly = false;

    switch(synthType)
    {
        case 0:
            enableVoice = true;
        break;
        case 1:
            voicePitchModOnly = true;
            enableVoice = true;
            enableEnv   = true;
            envType     = 1;
        break;
        case 2:
            voicePitchModOnly = true;
            enableVoice = true;
            enableEnv   = true;
            envType     = 2;
        break;
        case 3:
            enableVoice = false;
            enableEnv   = true;
            envType     = 2;
        break;
        case 4:
            enableVoice = false;
            enableEnv   = true;
            envType     = 1;
        break;
        case 5:
            enableVoice = true;
            enableSoftsynth = true;
            enableSoftDetune  = true;
            softWidth = 50000;
        break;
        case 6:
            enableVoice = true;
            enableSoftsynth = true;
            voicePitchModOnly = true;
            enableSoftDetune  = false;
            softWidth = (((float)(pwmFreq)/255) + 0.5) * 100000;
        break;
        case 7:
            enableNoise = true;
        break;
        default:
            enableVoice = true;
        break;
    }
    if(playing) {
        lastNoteFreq = 0;
        playing = false;
        playNote(note, velocity);
    }
}

